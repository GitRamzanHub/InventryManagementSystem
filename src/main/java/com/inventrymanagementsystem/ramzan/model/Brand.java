package com.inventrymanagementsystem.ramzan.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.inventrymanagementsystem.ramzan.dto.BrandDTO;
import com.inventrymanagementsystem.ramzan.repository.PortRepository;
import com.inventrymanagementsystem.ramzan.resource.BrandResource;
import com.inventrymanagementsystem.ramzan.resource.PortResource;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.beans.factory.annotation.Autowired;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "brand")
@Setter
@Getter
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Brand {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long brand_id;

    private String brandName;

    private String item; // (name of the rice)

    private double numberOfBags;

    @CreationTimestamp
    private Date incomingStockDate;

    @UpdateTimestamp
    private Date outgoingStockDate;

    private double bagKg;

    private String bagType;

    private double quantity;

    @ManyToOne
    @JoinColumn(name = "port_id")
    @JsonIgnore
    private Port port;









    // BrandResource to Brand Entity
//    public static Brand toBrandEntity(BrandResource brandResource){
//
//        return Brand.builder()
//                .brand_id(brandResource.getBrandId())
//                .brandName(brandResource.getBrandName())
//                .item(brandResource.getItem()).incomingStockDate(brandResource.getIncomingStockDate())
//                .numberOfBags(brandResource.getNumberOfBags())
//                .quantity(brandResource.getQuantity())
//                .incomingStockDate(brandResource.getIncomingStockDate())
//                .outgoingStockDate(brandResource.getOutgoingStockDate())
//                .bagKg(brandResource.getBagKg())
//                .bagType(brandResource.getBagType())
//                .build();
//    }
    public static Brand toBrandEntity(BrandDTO brandDTO){


        return Brand.builder()
                // no need to set Id as brand id is autogenerated
                .brandName(brandDTO.getBrandName())
                .item(brandDTO.getItem())
                .numberOfBags(brandDTO.getNumberOfBags())
                .quantity(brandDTO.getQuantity())
                .incomingStockDate(brandDTO.getIncomingStockDate())
                .outgoingStockDate(brandDTO.getOutgoingStockDate())
                .bagKg(brandDTO.getBagKg())
                .bagType(brandDTO.getBagType())
                .quantity(brandDTO.getQuantity())
                .port(brandDTO.getPort())
                .build();

    }

    // Brand Entity to Brand Resources
//    public static BrandResource toBrandResources(Brand brand){
//        return BrandResource.builder()
//                .brandId(brand.getBrand_id())
//                .brandName(brand.getBrandName())
//                .item(brand.getItem())
//                .numberOfBags(brand.getNumberOfBags())
//                .quantity(brand.getQuantity())
//                .incomingStockDate(brand.getIncomingStockDate())
//                .outgoingStockDate(brand.getOutgoingStockDate())
//                .bagKg(brand.getBagKg())
//                .bagType(brand.getBagType())
//                .ports(Port.toPortResource(brand.getPorts()))
//                .build();
//    }

    // Brand Entity to BrandDTO
    public static BrandDTO toBrandDTO(Brand brand){
        return BrandDTO.builder()
                .brandId(brand.getBrand_id())
                .brandName(brand.getBrandName())
                .item(brand.getItem())
                .numberOfBags(brand.getNumberOfBags())
                .quantity(brand.getQuantity())
                .incomingStockDate(brand.getIncomingStockDate())
                .outgoingStockDate(brand.getOutgoingStockDate())
                .bagKg((brand.getBagKg()))
                .bagType(brand.getBagType())
                .port(brand.getPort())
                .build();
    }

}
